"""
Django settings for cms project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)a
import codecs
import copy
import os
import yaml
from django.core.exceptions import ImproperlyConfigured

def get_env_setting(setting):
    """ Get the environment setting or return exception """
    try:
      return os.environ[setting]
    except KeyError:
      error_msg = u"Set the %s env variable" % setting
      raise ImproperlyConfigured(error_msg)


PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

DEBUG = False

# CONFIG_FILE = get_env_setting('WAGTAIL_CFG')

# with codecs.open(CONFIG_FILE, encoding='utf-8') as f:
#     __config__ = yaml.safe_load(f)

#     # ENV_TOKENS and AUTH_TOKENS are included for reverse compatability.
#     # Removing them may break plugins that rely on them.
#     ENV_TOKENS = __config__
#     AUTH_TOKENS = __config__

#     # Add the key/values from config into the global namespace of this module.
#     # But don't override the FEATURES dict because we do that in an additive way.
#     __config_copy__ = copy.deepcopy(__config__)
#     vars().update(__config_copy__)


# Application definition

INSTALLED_APPS = [
    'cms',
    'home',
    'search',

    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail.core',

    'modelcluster',
    'taggit',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',

    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
]

ROOT_URLCONF = 'cms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cms.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
   'default': {
       'ENGINE': 'django.db.backends.sqlite3',
       'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
   }
}

# DATABASES = AUTH_TOKENS['DATABASES']

# # The normal database user does not have enough permissions to run migrations.  
# # Migrations are run with separate credentials, given as DB_MIGRATION_*   
# # environment variables
# for name, database in DATABASES.items():
#     if name != 'read_replica':
#          database.update({
#              'ENGINE': os.environ.get('DB_MIGRATION_ENGINE', database['ENGINE']),
#              'USER': os.environ.get('DB_MIGRATION_USER', database['USER']),
#              'PASSWORD': os.environ.get('DB_MIGRATION_PASS', database['PASSWORD']),
#              'NAME': os.environ.get('DB_MIGRATION_NAME', database['NAME']),
#              'HOST': os.environ.get('DB_MIGRATION_HOST', database['HOST']), 
#              'PORT': os.environ.get('DB_MIGRATION_PORT', database['PORT']), 
#         })


SECRET_KEY = 'v9q)jf$eyau4*wn@h#4xd@=ps+7m^ea6*515s3+6%m*&z_6%cd'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, 'static'),
]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# JavaScript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/3.2/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# Wagtail settings

WAGTAIL_SITE_NAME = "cms"

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
BASE_URL = 'http://example.com'

# LOGGING = {
#   'version': 1,
#   'disable_existing_loggers': False,
#   'handlers': {
#     'file': {
#       'level': 'DEBUG',
#       'class': 'logging.FileHandler',
#       'filename': '/edx/var/log/wagtail/debug.log',
#     },
#   },
#   'loggers': {
#     'django': {
#       'handlers': ['file'],
#       'level': 'DEBUG',
#       'propagate': True,
#     },
#   },
# }
